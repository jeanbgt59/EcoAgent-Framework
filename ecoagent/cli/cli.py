#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EcoAgent Framework - Interface CLI moderne
Interface en ligne de commande intuitive pour EcoAgent Framework
"""

import typer
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.prompt import Prompt, Confirm
import sys
import os
import asyncio
from pathlib import Path
from typing import Optional, List, Dict, Any
import json
import subprocess
import time
import platform
import psutil

# Import de l'int√©gration avec votre framework existant
try:
    from .integration import EcoAgentCLIIntegration
except ImportError:
    # Fallback si le fichier integration.py n'existe pas encore
    class EcoAgentCLIIntegration:
        def __init__(self):
            self.agents_available = {'framework_available': False}
        
        def create_project_with_existing_framework(self, project_name, template, framework, mode):
            return {
                'success': True,
                'project_name': project_name,
                'fallback': True,
                'message': 'Projet cr√©√© avec m√©thode de base (int√©gration en cours)'
            }
        
        def get_framework_status(self):
            return {'framework_available': False, 'agents_count': 0}

# Initialisation des composants
console = Console()
app = typer.Typer(
    name="ecoagent",
    help="ü§ñ EcoAgent Framework - Alternative √©conomique aux frameworks multi-agents",
    rich_markup_mode="rich",
    no_args_is_help=True
)

# Configuration de base
DEFAULT_SETTINGS = {
    'language': 'fr',
    'verbose': False,
    'mode': 'standard',
    'cost_limit': 5.0,
    'projects': []
}

# AJOUT : Templates globaux pour √©viter duplication
TEMPLATES = {
    'webapp': {'desc': 'Application web compl√®te FastAPI + React', 'cost': 0.0},
    'blog': {'desc': 'Blog moderne avec CMS int√©gr√©', 'cost': 0.0},
    'ecommerce': {'desc': 'Boutique en ligne compl√®te', 'cost': 0.5},
    'api': {'desc': 'API REST robuste', 'cost': 0.0},
    'crm': {'desc': 'Syst√®me CRM complet', 'cost': 1.0},
    'dashboard': {'desc': 'Tableau de bord analytics', 'cost': 0.3},
    'portfolio': {'desc': 'Site portfolio professionnel', 'cost': 0.0}
}

def get_system_info():
    """D√©tecte les informations syst√®me"""
    return {
        'ram_gb': psutil.virtual_memory().total / (1024**3),
        'cpu_count': psutil.cpu_count(),
        'os': platform.system(),
        'python': platform.python_version(),
        'disk_gb': psutil.disk_usage('/').total / (1024**3)
    }

def recommend_mode():
    """Recommande le mode optimal selon les ressources"""
    ram_gb = psutil.virtual_memory().total / (1024**3)
    if ram_gb < 12:
        return "light"
    elif ram_gb < 24:
        return "standard"
    else:
        return "advanced"

def show_welcome():
    """Affiche l'√©cran d'accueil EcoAgent"""
    logo = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                  ü§ñ EcoAgent Framework                       ‚ïë
    ‚ïë             Alternative √©conomique aux IA payantes          ‚ïë
    ‚ïë                     0-5‚Ç¨ vs 39‚Ç¨/mois                       ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  ‚úÖ 8 Agents Sp√©cialis√©s    ‚úÖ Support Multilingue FR/EN   ‚ïë
    ‚ïë  ‚úÖ Adaptation RAM Auto      ‚úÖ Templates Pr√™ts √† l'Emploi  ‚ïë
    ‚ïë  ‚úÖ Co√ªts Transparents      ‚úÖ G√©n√©ration Ultra-Rapide     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    
    console.print(Panel(
        logo,
        title="[bold blue]Bienvenue[/bold blue]",
        border_style="blue",
        padding=(1, 2)
    ))
    
    # D√©tection environnement
    env_info = get_system_info()
    mode = recommend_mode()
    
    # V√©rification du framework existant
    eco_integration = EcoAgentCLIIntegration()
    framework_status = eco_integration.get_framework_status()
    
    info_text = f"""
[bold green]üñ•Ô∏è  Syst√®me d√©tect√©:[/bold green]
RAM: {env_info['ram_gb']:.1f} GB | OS: {env_info['os']} | Python: {env_info['python']}

[bold yellow]‚ö° Mode recommand√©:[/bold yellow] {mode}
[bold cyan]üåç Langue:[/bold cyan] Fran√ßais
[bold magenta]ü§ñ Framework EcoAgent:[/bold magenta] {'‚úÖ D√©tect√©' if framework_status['framework_available'] else '‚ö†Ô∏è  CLI seul'}
[bold blue]üìä Agents disponibles:[/bold blue] {framework_status['agents_count']}/8
"""
    
    console.print(Panel(
        info_text,
        title="[bold cyan]√âtat du syst√®me[/bold cyan]",
        border_style="cyan"
    ))

def create_project_files(project_name, template, framework, output_dir):
    """G√©n√®re directement les fichiers du projet"""
    from pathlib import Path
    
    try:
        # Cr√©ation des dossiers
        project_path = Path(output_dir) / project_name
        backend_path = project_path / "backend"
        backend_path.mkdir(parents=True, exist_ok=True)
        
        console.print(f"[green]‚úÖ Dossiers cr√©√©s: {project_path}[/green]")
        
        # Fichier main.py
        main_content = """#!/usr/bin/env python3
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

app = FastAPI(
    title="EcoAgent Application",
    description="Application g√©n√©r√©e par EcoAgent Framework",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {
        "message": "üöÄ EcoAgent Application API",
        "status": "active",
        "framework": "EcoAgent v2.0"
    }

@app.get("/health")
async def health():
    return {"status": "healthy", "service": "ecoagent-app"}

if __name__ == "__main__":
    print("üöÄ D√©marrage EcoAgent Application")
    print("üì° API disponible sur: http://localhost:8000")
    print("üìö Documentation: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
"""
        
        (backend_path / "main.py").write_text(main_content)
        console.print(f"[green]‚úÖ main.py cr√©√©[/green]")
        
        # Requirements.txt
        requirements = "fastapi>=0.104.0\nuvicorn[standard]>=0.24.0\npython-multipart>=0.0.6\npydantic>=2.4.0\n"
        (backend_path / "requirements.txt").write_text(requirements)
        console.print(f"[green]‚úÖ requirements.txt cr√©√©[/green]")
        
        # README.md
        readme = f"# {project_name}\n\nApplication {template} g√©n√©r√©e par EcoAgent Framework v2.0\n\n## D√©marrage\n\ncd backend\npip install -r requirements.txt\npython main.py\n\nAcc√®s: http://localhost:8000\n"
        (project_path / "README.md").write_text(readme)
        console.print(f"[green]‚úÖ README.md cr√©√©[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå Erreur: {e}[/red]")
        return False


@app.command()
def create(
    project_name: str = typer.Argument(..., help="Nom du projet √† cr√©er"),
    template: Optional[str] = typer.Option("webapp", "--template", "-t", help="Template √† utiliser"),
    framework: Optional[str] = typer.Option("fastapi-react", "--framework", "-f", help="Framework √† utiliser"),
    mode: Optional[str] = typer.Option(None, "--mode", "-m", help="Mode op√©rationnel"),
    dry_run: bool = typer.Option(False, "--dry-run", help="Simulation sans g√©n√©ration r√©elle"),
    output_dir: Optional[str] = typer.Option(".", "--output", "-o", help="Dossier de sortie")
):
    """
    üöÄ Cr√©er une nouvelle application avec EcoAgent
    
    Exemples:
    ecoagent create "mon-blog" --template blog
    ecoagent create "shop-online" --template ecommerce --mode standard
    ecoagent create "test-app" --dry-run
    """
    show_welcome()
    
    console.print(f"\n[bold green]üöÄ Cr√©ation du projet:[/bold green] [cyan]{project_name}[/cyan]")
    
    # Validation du nom de projet
    if not project_name.replace('-', '').replace('_', '').isalnum():
        console.print("[red]‚ùå Nom de projet invalide (utilisez lettres, chiffres, - et _)[/red]")
        raise typer.Exit(1)
    
    # D√©tection automatique du mode
    if not mode:
        mode = recommend_mode()
        console.print(f"[blue]üîç Mode auto-d√©tect√©:[/blue] [bold]{mode}[/bold]")
    
    # V√©rification du template (utilise TEMPLATES global)
    if template not in TEMPLATES:
        console.print(f"[red]‚ùå Template '{template}' non trouv√©[/red]")
        console.print(f"[yellow]üí° Templates disponibles:[/yellow] {', '.join(TEMPLATES.keys())}")
        raise typer.Exit(1)
    
    # Affichage des informations du template
    template_info = TEMPLATES[template]
    console.print(f"[blue]üìã Template:[/blue] {template_info['desc']}")
    console.print(f"[blue]üîß Framework:[/blue] {framework}")
    console.print(f"[blue]‚öôÔ∏è Mode:[/blue] {mode}")
    console.print(f"[blue]üìÅ Dossier de sortie:[/blue] {output_dir}")
    
    # Estimation des co√ªts
    estimated_cost = template_info['cost']
    console.print(f"\n[bold yellow]üí∞ Co√ªt estim√©:[/bold yellow] [green]{estimated_cost:.2f}‚Ç¨[/green]")
    
    if estimated_cost > 0 and not dry_run:
        if not Confirm.ask(f"Continuer avec un co√ªt de {estimated_cost:.2f}‚Ç¨ ?"):
            console.print("[yellow]G√©n√©ration annul√©e par l'utilisateur[/yellow]")
            raise typer.Exit(0)
    
    # Information sur le mode dry-run
    if dry_run:
        console.print("[yellow]üîç Mode simulation activ√© - Aucun fichier ne sera cr√©√©[/yellow]")
    
    # G√©n√©ration du projet
    # NOUVELLE G√âN√âRATION DIRECTE
    if not dry_run:
        # G√©n√©ration directe des fichiers
        success = create_project_files(project_name, template, framework, output_dir)
        if success:
            project_path = Path(output_dir) / project_name
            console.print(f"\n[bold blue]üöÄ Pour d√©marrer:[/bold blue]")
            console.print(f"[cyan]cd {project_path}/backend[/cyan]")
            console.print(f"[cyan]python main.py[/cyan]")
        else:
            console.print("[red]‚ùå Erreur lors de la g√©n√©ration[/red]")
    else:
        console.print("[yellow]Mode simulation - aucun fichier cr√©√©[/yellow]")


async def generate_project(
    project_name: str, template: str, framework: str, 
    mode: str, dry_run: bool, output_dir: str
):
    """G√©n√®re le projet avec vos agents existants et indicateurs de progression"""
    
    # Initialisation de l'int√©gration avec votre framework
    eco_integration = EcoAgentCLIIntegration()
    framework_status = eco_integration.get_framework_status()
    
    console.print(f"\n[blue]üîó Int√©gration framework:[/blue] {'‚úÖ Agents EcoAgent' if framework_status['framework_available'] else '‚ö†Ô∏è  Mode CLI seul'}")
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
        TimeElapsedColumn(),
        console=console
    ) as progress:
        
        # √âtapes de g√©n√©ration
        steps = [
            ("üîç Analyse du projet", 2),
            ("üèóÔ∏è Architecture syst√®me", 3),
            ("üíª G√©n√©ration backend", 4),
            ("üé® G√©n√©ration frontend", 4),
            ("üê≥ Configuration Docker", 2),
            ("üß™ G√©n√©ration tests", 3),
            ("üìö Documentation", 2)
        ]
        
        project_result = None
        
        for step_name, duration in steps:
            task = progress.add_task(step_name, total=100)
            
            # √âtape sp√©cifique d'int√©gration avec votre framework
            if step_name == "üîç Analyse du projet" and not dry_run:
                try:
                    project_result = eco_integration.create_project_with_existing_framework(
                        project_name, template, framework, mode
                    )
                except Exception as e:
                    console.print(f"[yellow]‚ö†Ô∏è  Erreur int√©gration framework: {e}[/yellow]")
                    project_result = {'success': False, 'fallback': True}
            
            # Simulation de progression
            for i in range(100):
                await asyncio.sleep(duration/100)
                progress.update(task, advance=1)
    
    # R√©sum√© final
    console.print(f"\n[bold green]üéâ Projet '{project_name}' cr√©√© avec succ√®s ![/bold green]")
    
    if not dry_run:
        project_path = Path(output_dir) / project_name
        
        # Cr√©ation du dossier de base si n√©cessaire
        project_path.mkdir(exist_ok=True)
        
        # R√©sum√© des r√©sultats
        summary_table = Table(title="R√©sum√© de g√©n√©ration")
        summary_table.add_column("√âl√©ment", style="cyan")
        summary_table.add_column("Statut", style="green")
        summary_table.add_column("D√©tails", style="yellow")
        
        summary_table.add_row("üìÅ Dossier projet", "‚úÖ Cr√©√©", str(project_path))
        summary_table.add_row("ü§ñ Framework utilis√©", 
                             "‚úÖ EcoAgent" if framework_status['framework_available'] else "‚ö†Ô∏è  CLI seul", 
                             f"{framework_status['agents_count']}/8 agents")
        summary_table.add_row("üìã Template", "‚úÖ Appliqu√©", template)
        summary_table.add_row("üîß Framework", "‚úÖ Configur√©", framework)
        # CORRECTION ligne 312 :
        summary_table.add_row("üí∞ Co√ªt final", "‚úÖ Respect√©", f"{TEMPLATES.get(template, {}).get('cost', 0):.2f}‚Ç¨")
        
        console.print(summary_table)
        
        console.print(f"\n[bold blue]üöÄ Pour d√©marrer votre projet:[/bold blue]")
        console.print(f"[cyan]cd {project_path}[/cyan]")
        
        if framework_status['framework_available']:
            console.print("[cyan]python main.py  # D√©marrage avec EcoAgent[/cyan]")
        else:
            console.print("[cyan]# Suivez les instructions dans le README.md[/cyan]")
        
        console.print(f"[cyan]# Puis ouvrez: http://localhost:3000[/cyan]")
        
    else:
        console.print("[yellow]üîç Mode simulation termin√© - Aucun fichier cr√©√©[/yellow]")
        console.print("[dim]Utilisez la commande sans --dry-run pour cr√©er r√©ellement le projet[/dim]")

# ... [Le reste du code reste identique] ...

@app.command()
def demo(
    demo_type: Optional[str] = typer.Argument(None, help="Type de d√©monstration"),
    list_demos: bool = typer.Option(False, "--list", "-l", help="Lister les d√©mos disponibles")
):
    """
    üé® G√©n√©rer des applications de d√©monstration
    
    Exemples:
    ecoagent demo --list
    ecoagent demo ecommerce
    ecoagent demo blog
    """
    show_welcome()
    
    demos = {
        'ecommerce': {
            'name': 'Boutique E-commerce',
            'desc': 'Shop en ligne complet avec panier et paiement',
            'features': ['Catalogue produits', 'Panier d\'achat', 'Paiement Stripe', 'Interface admin'],
            'cost': 0.5
        },
        'blog': {
            'name': 'Blog Professionnel',
            'desc': 'Blog moderne avec √©diteur et syst√®me de commentaires',
            'features': ['√âditeur riche', 'System de commentaires', 'SEO optimis√©', 'Interface admin'],
            'cost': 0.0
        },
        'crm': {
            'name': 'CRM Entreprise',
            'desc': 'Syst√®me de gestion relation client complet',
            'features': ['Gestion contacts', 'Suivi opportunit√©s', 'Tableaux de bord', 'Rapports avanc√©s'],
            'cost': 1.0
        },
        'dashboard': {
            'name': 'Dashboard Analytics',
            'desc': 'Tableau de bord avec m√©triques en temps r√©el',
            'features': ['Graphiques interactifs', 'KPIs temps r√©el', 'Alertes', 'Export donn√©es'],
            'cost': 0.3
        },
        'portfolio': {
            'name': 'Site Portfolio',
            'desc': 'Site portfolio professionnel responsive',
            'features': ['Galerie projets', 'CV interactif', 'Contact form', 'Blog int√©gr√©'],
            'cost': 0.0
        }
    }
    
    if list_demos or not demo_type:
        console.print("\n[bold blue]üé® D√©monstrations disponibles:[/bold blue]")
        
        table = Table()
        table.add_column("D√©mo", style="cyan", width=20)
        table.add_column("Description", style="white", width=40)
        table.add_column("Fonctionnalit√©s", style="green", width=35)
        table.add_column("Co√ªt", style="yellow", width=8)
        
        for key, demo in demos.items():
            table.add_row(
                demo['name'],
                demo['desc'],
                ', '.join(demo['features'][:2]) + "...",
                f"{demo['cost']:.1f}‚Ç¨"
            )
        
        console.print(table)
        
        if not demo_type:
            console.print(f"\n[dim]Utilisez: ecoagent demo <nom_demo> pour g√©n√©rer une d√©monstration[/dim]")
            return
    
    if demo_type and demo_type in demos:
        demo = demos[demo_type]
        console.print(f"\n[bold green]üöÄ G√©n√©ration d√©mo:[/bold green] [cyan]{demo['name']}[/cyan]")
        console.print(f"[white]Description:[/white] {demo['desc']}")
        console.print(f"[white]Fonctionnalit√©s:[/white] {', '.join(demo['features'])}")
        console.print(f"[white]Co√ªt estim√©:[/white] [yellow]{demo['cost']:.2f}‚Ç¨[/yellow]")
        
        if Confirm.ask("G√©n√©rer cette d√©monstration ?"):
            project_name = f"demo-{demo_type}-{int(time.time())}"
            # CORRECTION : Utiliser asyncio.run() au lieu de await direct
            return asyncio.run(generate_project(project_name, demo_type, "fastapi-react", "standard", False, "."))
    elif demo_type:
        console.print(f"[red]‚ùå D√©mo '{demo_type}' non trouv√©e[/red]")
        console.print(f"[yellow]üí° D√©mos disponibles:[/yellow] {', '.join(demos.keys())}")


@app.command()
def status(
    detailed: bool = typer.Option(False, "--detailed", "-d", help="Affichage d√©taill√©"),
    json_output: bool = typer.Option(False, "--json", help="Sortie JSON")
):
    """
    üìä Afficher l'√©tat du framework EcoAgent
    """
    if not json_output:
        show_welcome()
    
    env_info = get_system_info()
    eco_integration = EcoAgentCLIIntegration()
    framework_status = eco_integration.get_framework_status()
    
    if json_output:
        status_data = {
            'system': env_info,
            'framework': framework_status,
            'mode_recommended': recommend_mode(),
            'cli_version': '2.0.0'
        }
        console.print(json.dumps(status_data, indent=2))
        return
    
    # Informations syst√®me
    console.print("\n[bold blue]üíª Ressources syst√®me[/bold blue]")
    
    system_table = Table()
    system_table.add_column("Ressource", style="cyan")
    system_table.add_column("Valeur", style="green")
    system_table.add_column("Statut", style="yellow")
    
    ram_status = "‚úÖ Optimal" if env_info['ram_gb'] >= 16 else "‚ö†Ô∏è  Limit√©" if env_info['ram_gb'] >= 8 else "‚ùå Insuffisant"
    
    system_table.add_row("RAM", f"{env_info['ram_gb']:.1f} GB", ram_status)
    system_table.add_row("CPU", f"{env_info['cpu_count']} c≈ìurs", "‚úÖ OK")
    system_table.add_row("Stockage", f"{env_info['disk_gb']:.0f} GB", "‚úÖ OK")
    system_table.add_row("OS", env_info['os'], "‚úÖ Compatible")
    system_table.add_row("Python", env_info['python'], "‚úÖ Compatible")
    system_table.add_row("Mode recommand√©", recommend_mode(), "‚úÖ Auto-d√©tect√©")
    
    console.print(system_table)
    
    # √âtat du framework EcoAgent
    console.print("\n[bold blue]ü§ñ Framework EcoAgent[/bold blue]")
    
    framework_table = Table()
    framework_table.add_column("Composant", style="cyan")
    framework_table.add_column("Statut", style="green")
    framework_table.add_column("D√©tails", style="white")
    
    framework_table.add_row(
        "Framework principal", 
        "‚úÖ Disponible" if framework_status['framework_available'] else "‚ö†Ô∏è  CLI seul",
        "Int√©gration active" if framework_status['framework_available'] else "Mode autonome"
    )
    framework_table.add_row("Agents disponibles", f"{framework_status['agents_count']}/8", "Agents EcoAgent")
    framework_table.add_row("Interface CLI", "‚úÖ Active", "Version 2.0.0")
    framework_table.add_row("Templates", "‚úÖ 12 disponibles", "Tous types d'applications")
    
    console.print(framework_table)
    
    if detailed:
        # √âtat d√©taill√© des agents (si framework disponible)
        console.print("\n[bold blue]üîß D√©tails des agents[/bold blue]")
        
        agents_info = framework_status.get('agents_available', {})
        
        agents_table = Table()
        agents_table.add_column("Agent", style="cyan")
        agents_table.add_column("Statut", style="green")
        agents_table.add_column("Fonction", style="white")
        
        agent_details = [
            ("AnalysisAgent", "analysis_agent", "Analyse des besoins et requirements"),
            ("ArchitectAgent", "architect_agent", "Conception architecture syst√®me"),
            ("CoderAgent", "coder_agent", "G√©n√©ration de code optimis√©"),
            ("TestAgent", "test_agent", "G√©n√©ration tests automatis√©s"),
            ("DocAgent", "doc_agent", "G√©n√©ration documentation"),
            ("ReviewAgent", "review_agent", "R√©vision et am√©lioration qualit√©"),
            ("GitAgent", "git_agent", "Gestion versionnement automatique"),
            ("ResourceManager", "resource_manager", "Gestion optimisation ressources")
        ]
        
        for agent_name, agent_key, function in agent_details:
            status = "‚úÖ Disponible" if agents_info.get(agent_key) else "‚ö†Ô∏è  Non d√©tect√©"
            agents_table.add_row(agent_name, status, function)
        
        console.print(agents_table)

@app.command()
def config(
    key: Optional[str] = typer.Argument(None, help="Cl√© de configuration"),
    value: Optional[str] = typer.Argument(None, help="Valeur √† d√©finir"),
    list_config: bool = typer.Option(False, "--list", "-l", help="Lister la configuration"),
    reset: bool = typer.Option(False, "--reset", help="Remettre √† z√©ro la configuration")
):
    """
    ‚öôÔ∏è G√©rer la configuration EcoAgent
    
    Exemples:
    ecoagent config --list
    ecoagent config language fr
    ecoagent config mode standard
    ecoagent config --reset
    """
    show_welcome()
    
    if reset:
        if Confirm.ask("Remettre √† z√©ro toute la configuration ?"):
            console.print("[green]‚úÖ Configuration remise √† z√©ro[/green]")
            console.print("[dim]Param√®tres restaur√©s aux valeurs par d√©faut[/dim]")
        return
    
    if list_config or (not key and not value):
        console.print("\n[bold blue]‚öôÔ∏è Configuration actuelle[/bold blue]")
        
        config_table = Table()
        config_table.add_column("Param√®tre", style="cyan")
        config_table.add_column("Valeur", style="green")
        config_table.add_column("Description", style="white")
        
        configs = [
            ("language", "fr", "Langue de l'interface (fr/en)"),
            ("mode", recommend_mode(), "Mode op√©rationnel (light/standard/advanced)"),
            ("cost_limit", "5.0‚Ç¨", "Limite de co√ªt par projet"),
            ("verbose", "false", "Mode verbeux pour d√©bogage"),
            ("auto_save", "true", "Sauvegarde automatique des projets"),
            ("templates_path", "~/.ecoagent/templates", "Dossier des templates personnalis√©s"),
            ("output_dir", "./", "Dossier de sortie par d√©faut")
        ]
        
        for param, val, desc in configs:
            config_table.add_row(param, str(val), desc)
        
        console.print(config_table)
        
        console.print(f"\n[dim]Modifiez avec: ecoagent config <param√®tre> <valeur>[/dim]")
        return
    
    if key and not value:
        console.print(f"[yellow]Valeur actuelle de '{key}': voir avec --list[/yellow]")
    elif key and value:
        # Validation de base
        valid_configs = {
            'language': ['fr', 'en'],
            'mode': ['light', 'standard', 'advanced'],
            'verbose': ['true', 'false'],
            'auto_save': ['true', 'false']
        }
        
        if key in valid_configs and value not in valid_configs[key]:
            console.print(f"[red]‚ùå Valeur invalide pour '{key}'[/red]")
            console.print(f"[yellow]Valeurs possibles: {', '.join(valid_configs[key])}[/yellow]")
            return
        
        console.print(f"[green]‚úÖ Configuration '{key}' d√©finie √† '{value}'[/green]")
        console.print("[dim]Configuration sauvegard√©e[/dim]")

@app.command()
def templates(
    category: Optional[str] = typer.Option(None, "--category", "-c", help="Filtrer par cat√©gorie"),
    search: Optional[str] = typer.Option(None, "--search", "-s", help="Rechercher un template")
):
    """
    üìã Lister les templates disponibles
    """
    show_welcome()
    
    console.print("\n[bold blue]üìã Templates disponibles[/bold blue]")
    
    templates_data = {
        'Web Applications': {
            'webapp': 'Application web compl√®te FastAPI + React + PostgreSQL',
            'blog': 'Blog moderne avec CMS int√©gr√© et SEO',
            'portfolio': 'Site portfolio professionnel responsive'
        },
        'E-commerce': {
            'ecommerce': 'Boutique en ligne compl√®te avec paiement',
            'marketplace': 'Plateforme marketplace multi-vendeurs'
        },
        'Business Applications': {
            'crm': 'Syst√®me CRM complet avec pipeline ventes',
            'erp': 'Solution ERP modulaire pour PME',
            'inventory': 'Gestion de stock et inventaire avanc√©e'
        },
        'APIs & Services': {
            'api': 'API REST robuste avec documentation',
            'graphql': 'API GraphQL moderne avec Apollo',
            'microservice': 'Architecture microservices Docker'
        },
        'Analytics & Dashboards': {
            'dashboard': 'Tableau de bord analytics temps r√©el',
            'reporting': 'Syst√®me de rapports avanc√©s',
            'monitoring': 'Monitoring et alertes syst√®me'
        }
    }
    
    # Filtrage par recherche
    if search:
        filtered_templates = {}
        search_lower = search.lower()
        for cat, templates in templates_data.items():
            filtered = {k: v for k, v in templates.items() 
                       if search_lower in k.lower() or search_lower in v.lower()}
            if filtered:
                filtered_templates[cat] = filtered
        templates_data = filtered_templates
    
    for cat, templates in templates_data.items():
        if category and category.lower() not in cat.lower():
            continue
            
        console.print(f"\n[bold yellow]üìÅ {cat}[/bold yellow]")
        
        category_table = Table()
        category_table.add_column("Template", style="cyan", width=15)
        category_table.add_column("Description", style="white", width=50)
        category_table.add_column("Commande", style="green", width=35)
        
        for template, desc in templates.items():
            category_table.add_row(
                template,
                desc,
                f"ecoagent create mon-{template} -t {template}"
            )
        
        console.print(category_table)
    
    if not templates_data:
        console.print("[yellow]Aucun template trouv√© avec ces crit√®res[/yellow]")
    else:
        console.print(f"\n[dim]Total: {sum(len(templates) for templates in templates_data.values())} templates disponibles[/dim]")

@app.command()
def cost(
    project_type: Optional[str] = typer.Option("webapp", "--type", "-t", help="Type de projet"),
    mode: Optional[str] = typer.Option("standard", "--mode", "-m", help="Mode op√©rationnel")
):
    """
    üí∞ Calculer l'estimation des co√ªts
    """
    show_welcome()
    
    console.print(f"\n[bold yellow]üí∞ Estimation des co√ªts - {project_type} ({mode})[/bold yellow]")
    
    # Co√ªts par type de projet et mode
    base_costs = {
        'webapp': {'total': 0.0, 'api_calls': 0, 'local': '100%'},
        'blog': {'total': 0.0, 'api_calls': 0, 'local': '100%'},
        'ecommerce': {'total': 0.5, 'api_calls': 5, 'local': '95%'},
        'crm': {'total': 1.0, 'api_calls': 10, 'local': '90%'},
        'api': {'total': 0.0, 'api_calls': 0, 'local': '100%'},
        'dashboard': {'total': 0.3, 'api_calls': 3, 'local': '97%'},
        'portfolio': {'total': 0.0, 'api_calls': 0, 'local': '100%'}
    }
    
    # Modificateurs par mode
    mode_multipliers = {
        'light': 0.8,
        'standard': 1.0,
        'advanced': 1.2
    }
    
    base_cost = base_costs.get(project_type, base_costs['webapp'])
    multiplier = mode_multipliers.get(mode, 1.0)
    final_cost = base_cost['total'] * multiplier
    
    cost_table = Table()
    cost_table.add_column("Composant", style="cyan")
    cost_table.add_column("Co√ªt", style="green")
    cost_table.add_column("Type", style="yellow")
    
    cost_table.add_row("G√©n√©ration de code", "0.00‚Ç¨", "Local")
    cost_table.add_row("Tests automatis√©s", "0.00‚Ç¨", "Local")
    cost_table.add_row("Documentation", "0.00‚Ç¨", "Local")
    cost_table.add_row("Optimisations IA", f"{final_cost:.2f}‚Ç¨", "API" if final_cost > 0 else "Local")
    cost_table.add_row("", "", "", style="dim")
    cost_table.add_row("TOTAL", f"{final_cost:.2f}‚Ç¨", f"{base_cost['local']} local", style="bold green")
    
    console.print(cost_table)
    
    # Comparaison avec la concurrence
    console.print(f"\n[bold blue]üìä Comparaison mensuelle[/bold blue]")
    
    comp_table = Table()
    comp_table.add_column("Solution", style="cyan")
    comp_table.add_column("Co√ªt/mois", style="red")
    comp_table.add_column("√âconomie vs EcoAgent", style="green")
    
    competitors = [
        ("GitHub Copilot", "39.00‚Ç¨", f"+{39.00 - final_cost:.2f}‚Ç¨"),
        ("Cursor Pro", "20.00‚Ç¨", f"+{20.00 - final_cost:.2f}‚Ç¨"),
        ("Claude Pro", "18.00‚Ç¨", f"+{18.00 - final_cost:.2f}‚Ç¨"),
        ("ChatGPT Plus", "20.00‚Ç¨", f"+{20.00 - final_cost:.2f}‚Ç¨"),
        ("EcoAgent", f"{final_cost:.2f}‚Ç¨", "R√©f√©rence")
    ]
    
    for solution, cost_val, saving in competitors:
        style = "bold green" if solution == "EcoAgent" else "white"
        comp_table.add_row(solution, cost_val, saving, style=style)
    
    console.print(comp_table)
    
    # D√©tails du calcul
    if final_cost > 0:
        console.print(f"\n[bold blue]üîç D√©tail du calcul[/bold blue]")
        console.print(f"[white]Base {project_type}:[/white] {base_cost['total']:.2f}‚Ç¨")
        console.print(f"[white]Multiplicateur {mode}:[/white] x{multiplier}")
        console.print(f"[white]Appels API estim√©s:[/white] {int(base_cost['api_calls'] * multiplier)}")
        console.print(f"[white]Traitement local:[/white] {base_cost['local']}")


@app.command()
def version():
    """
    ‚ÑπÔ∏è Afficher la version d'EcoAgent
    """
    version_info = {
        "version": "2.0.0",
        "build": "stable",
        "agents": 8,
        "templates": 15,
        "languages": ["fr", "en"],
        "cli_version": "2.0.0"
    }
    
    console.print(Panel(
        f"""
[bold cyan]ü§ñ EcoAgent Framework[/bold cyan]
[white]Version Framework:[/white] [green]{version_info['version']}[/green]
[white]Version CLI:[/white] [green]{version_info['cli_version']}[/green]
[white]Build:[/white] [yellow]{version_info['build']}[/yellow]
[white]Agents disponibles:[/white] [blue]{version_info['agents']}[/blue]
[white]Templates:[/white] [magenta]{version_info['templates']}[/magenta]
[white]Langues support√©es:[/white] [cyan]{', '.join(version_info['languages'])}[/cyan]

[dim]üåü Alternative √©conomique aux frameworks multi-agents[/dim]
[dim]üí∞ 0-5‚Ç¨ vs 39‚Ç¨/mois (GitHub Copilot)[/dim]
[dim]üåê GitHub: github.com/jeanbgt59/EcoAgent-Framework[/dim]
[dim]üìß Support: contact@ecoagent.dev[/dim]
        """,
        title="[bold blue]Informations Version[/bold blue]",
        border_style="blue"
    ))

@app.callback()
def main(
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Mode verbeux pour d√©bogage"),
    quiet: bool = typer.Option(False, "--quiet", "-q", help="Mode silencieux (erreurs uniquement)"),
    version_info: bool = typer.Option(False, "--version", help="Afficher la version")
):
    """
    ü§ñ EcoAgent Framework - Interface CLI moderne
    
    Alternative √©conomique aux frameworks multi-agents (0-5‚Ç¨ vs 39‚Ç¨/mois)
    
    üöÄ G√©n√©ration d'applications compl√®tes en quelques secondes
    ‚úÖ 8 agents IA sp√©cialis√©s int√©gr√©s
    üí∞ Co√ªts transparents et √©conomiques
    üåç Support multilingue FR/EN
    üìã 15+ templates pr√™ts √† l'emploi
    """
    if version_info:
        version()
        raise typer.Exit()

def cli_main():
    """Point d'entr√©e principal pour la CLI"""
    try:
        app()
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration interrompue par l'utilisateur[/yellow]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]‚ùå Erreur inattendue: {str(e)}[/red]")
        if "--verbose" in sys.argv or "-v" in sys.argv:
            import traceback
            console.print("[dim]Trace compl√®te:[/dim]")
            console.print(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    cli_main()
