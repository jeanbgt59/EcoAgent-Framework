"""
EcoAgent Framework - Resource Manager
D√©tecte automatiquement les ressources syst√®me et optimise la configuration
"""

import psutil
import platform
import subprocess
from typing import Dict, Tuple, Optional
from enum import Enum
import logging

class ResourceTier(Enum):
    """Niveaux de ressources d√©tect√©s"""
    MINIMAL = "minimal"      # < 8GB RAM
    STANDARD = "standard"    # 8-16GB RAM
    ENHANCED = "enhanced"    # 16-32GB RAM  
    PREMIUM = "premium"      # > 32GB RAM

class ResourceManager:
    """Gestionnaire intelligent des ressources syst√®me"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._system_info = self._detect_system()
        self._resource_tier = self._determine_tier()
        
    def _detect_system(self) -> Dict:
        """D√©tecte les sp√©cifications du syst√®me"""
        try:
            return {
                'platform': platform.system(),
                'machine': platform.machine(),
                'processor': platform.processor(),
                'ram_gb': round(psutil.virtual_memory().total / (1024**3), 1),
                'cpu_cores': psutil.cpu_count(logical=True),
                'cpu_cores_physical': psutil.cpu_count(logical=False),
                'ollama_available': self._check_ollama_availability()
            }
        except Exception as e:
            self.logger.error(f"Erreur d√©tection syst√®me: {e}")
            return self._get_fallback_config()
    
    def _check_ollama_availability(self) -> bool:
        """V√©rifie si Ollama est install√© et accessible"""
        try:
            result = subprocess.run(['ollama', 'list'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=5)
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def _determine_tier(self) -> ResourceTier:
        """D√©termine le niveau de ressources disponibles"""
        ram = self._system_info['ram_gb']
        
        if ram >= 32:
            return ResourceTier.PREMIUM
        elif ram >= 16:
            return ResourceTier.ENHANCED  # Votre MacBook Pro !
        elif ram >= 8:
            return ResourceTier.STANDARD
        else:
            return ResourceTier.MINIMAL
    
    def get_optimal_model_config(self) -> Dict:
        """Retourne la configuration optimale des mod√®les selon les ressources"""
        configs = {
            ResourceTier.MINIMAL: {
                'primary_model': 'tinyllama',
                'fallback_model': None,
                'max_concurrent_agents': 2,
                'use_api_threshold': 0.8,  # Utilise API si charge > 80%
                'context_window': 2048
            },
            ResourceTier.STANDARD: {
                'primary_model': 'gemma:2b',
                'fallback_model': 'tinyllama',
                'max_concurrent_agents': 4,
                'use_api_threshold': 0.85,
                'context_window': 4096
            },
            ResourceTier.ENHANCED: {  # Votre configuration optimale
                'primary_model': 'mistral:7b',
                'fallback_model': 'gemma:2b',
                'coding_model': 'codellama:7b',
                'max_concurrent_agents': 6,
                'use_api_threshold': 0.9,
                'context_window': 8192
            },
            ResourceTier.PREMIUM: {
                'primary_model': 'codellama:13b',
                'fallback_model': 'mistral:7b',
                'coding_model': 'codellama:13b',
                'max_concurrent_agents': 8,
                'use_api_threshold': 0.95,
                'context_window': 16384
            }
        }
        
        return configs[self._resource_tier]
    
    def can_run_concurrent_agents(self, requested_agents: int) -> bool:
        """V√©rifie si le syst√®me peut g√©rer N agents simultan√©ment"""
        max_agents = self.get_optimal_model_config()['max_concurrent_agents']
        current_load = psutil.cpu_percent(interval=1)
        memory_usage = psutil.virtual_memory().percent
        
        # Logique de d√©cision intelligente
        if current_load > 80 or memory_usage > 85:
            return requested_agents <= max(1, max_agents // 2)
        
        return requested_agents <= max_agents
    
    def get_system_summary(self) -> str:
        """Retourne un r√©sum√© lisible de la configuration"""
        info = self._system_info
        config = self.get_optimal_model_config()
        
        return f"""
üñ•Ô∏è  Syst√®me d√©tect√©: {info['platform']} ({info['machine']})
üíæ RAM: {info['ram_gb']} GB
üîß CPU: {info['cpu_cores']} c≈ìurs ({info['cpu_cores_physical']} physiques)
ü§ñ Ollama: {'‚úÖ Disponible' if info['ollama_available'] else '‚ùå Non d√©tect√©'}
‚ö° Niveau: {self._resource_tier.value.upper()}
üéØ Mod√®le principal: {config['primary_model']}
üë• Agents simultan√©s max: {config['max_concurrent_agents']}
        """.strip()

    def _get_fallback_config(self) -> Dict:
        """Configuration de s√©curit√© si la d√©tection √©choue"""
        return {
            'platform': 'Unknown',
            'machine': 'Unknown', 
            'processor': 'Unknown',
            'ram_gb': 8.0,  # Estimation conservatrice
            'cpu_cores': 4,
            'cpu_cores_physical': 2,
            'ollama_available': False
        }

# Instance globale pour usage dans le framework
resource_manager = ResourceManager()
