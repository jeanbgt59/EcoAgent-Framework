#!/usr/bin/env python3
"""
Test de l'agent codeur avec pipeline complet Analyse ‚Üí Architecture ‚Üí Code
"""

import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from ecoagent.agents.analysis_agent import analysis_agent
from ecoagent.agents.architect_agent import architect_agent
from ecoagent.agents.coder_agent import CoderAgent

# Cr√©ez l'instance si l'import de coder_agent √©choue
try:
    from ecoagent.agents.coder_agent import coder_agent
except ImportError:
    coder_agent = CoderAgent()

async def test_full_pipeline():
    print("üíª Test complet du Pipeline de G√©n√©ration de Code")
    print("=" * 60)
    
    # Description du projet √† cr√©er
    project_description = "Application web FastAPI pour g√©rer une biblioth√®que avec gestion des livres, des auteurs, authentification JWT, base de donn√©es PostgreSQL et API REST compl√®te"
    
    # √âtape 1: Analyse
    print("üìã √âtape 1: Analyse du projet")
    analysis_task = {
        'id': 'full_pipeline_test',
        'type': 'analysis',
        'description': project_description
    }
    
    analysis_result = await analysis_agent.start_task(analysis_task)
    
    if not analysis_result['success']:
        print(f"‚ùå √âchec de l'analyse: {analysis_result['error']}")
        return
    
    print(f"‚úÖ Analyse termin√©e: {analysis_result['project_type']} ({analysis_result['complexity']})")
    print(f"   Workflow recommand√©: {analysis_result['recommended_workflow']}")
    print(f"   Estimation: {analysis_result['resource_estimate']['time_hours']}h")
    
    # √âtape 2: Architecture
    print("\nüèóÔ∏è  √âtape 2: Conception de l'architecture")
    architect_task = {
        'id': 'full_pipeline_test',
        'type': 'architect',
        'description': project_description,
        'context': {'analysis': analysis_result}
    }
    
    architect_result = await architect_agent.start_task(architect_task)
    
    if not architect_result['success']:
        print(f"‚ùå √âchec de l'architecture: {architect_result['error']}")
        return
    
    print("‚úÖ Architecture con√ßue avec succ√®s!")
    tech_stack = architect_result['technology_stack']
    print(f"   Stack: {tech_stack.get('backend', 'N/A')} + {tech_stack.get('database', 'N/A')}")
    print(f"   API endpoints: {len(architect_result.get('api_design', {}).get('endpoints', []))}")
    
    # √âtape 3: G√©n√©ration de code
    print("\nüíª √âtape 3: G√©n√©ration du code source")
    coder_task = {
        'id': 'full_pipeline_test',
        'type': 'coder',
        'description': project_description,
        'context': {
            'analysis': analysis_result,
            'architect': architect_result
        }
    }
    
    coder_result = await coder_agent.start_task(coder_task)
    
    if coder_result['success']:
        print("‚úÖ Code g√©n√©r√© avec succ√®s!")
        print(f"   Fichiers cr√©√©s: {coder_result['file_count']}")
        print(f"   Point d'entr√©e: {coder_result['entry_point']}")
        print(f"   Technologies: {', '.join(coder_result['main_technologies'])}")
        
        # Affichage de quelques fichiers g√©n√©r√©s
        print("\nüìÅ Fichiers g√©n√©r√©s (√©chantillon):")
        generated_files = coder_result['generated_files']
        
        key_files = ['main.py', 'requirements.txt', 'README.md', 'app/config.py', 'app/models/user.py']
        for file_name in key_files:
            if file_name in generated_files:
                size = len(generated_files[file_name])
                print(f"   ‚úÖ {file_name} ({size} caract√®res)")
        
        # Affichage des commandes d'installation
        print(f"\nüîß Commandes d'installation:")
        for cmd in coder_result['installation_commands']:
            print(f"   ‚Ä¢ {cmd}")
        
        # Affichage des commandes de lancement
        print(f"\nüöÄ Commandes de lancement:")
        for cmd in coder_result['run_commands']:
            print(f"   ‚Ä¢ {cmd}")
        
        # V√©rification de la coh√©rence du code g√©n√©r√©
        print("\nüîç V√©rification de la coh√©rence:")
        
        # V√©rifiez que les fichiers essentiels sont pr√©sents
        essential_files = ['main.py', 'requirements.txt', 'README.md']
        missing_files = [f for f in essential_files if f not in generated_files]
        
        if not missing_files:
            print("   ‚úÖ Tous les fichiers essentiels sont pr√©sents")
        else:
            print(f"   ‚ö†Ô∏è  Fichiers manquants: {missing_files}")
        
        # V√©rifiez que le main.py contient FastAPI
        main_py_content = generated_files.get('main.py', '')
        if 'FastAPI' in main_py_content and 'uvicorn' in main_py_content:
            print("   ‚úÖ Structure FastAPI d√©tect√©e dans main.py")
        else:
            print("   ‚ö†Ô∏è  Structure FastAPI non d√©tect√©e")
        
        # V√©rifiez que les d√©pendances sont list√©es
        requirements_content = generated_files.get('requirements.txt', '')
        if 'fastapi' in requirements_content and 'uvicorn' in requirements_content:
            print("   ‚úÖ D√©pendances FastAPI pr√©sentes")
        else:
            print("   ‚ö†Ô∏è  D√©pendances FastAPI manquantes")
        
    else:
        print(f"‚ùå Erreur g√©n√©ration de code: {coder_result['error']}")
    
    # Statistiques finales
    print(f"\nüìä Statistiques du pipeline:")
    
    agents_stats = [
        ("Analyse", analysis_agent.get_performance_summary()),
        ("Architecture", architect_agent.get_performance_summary()), 
        ("Codeur", coder_agent.get_performance_summary())
    ]
    
    total_cost = 0.0
    total_time = 0.0
    
    for agent_name, stats in agents_stats:
        print(f"   {agent_name}: {stats['total_tasks']} t√¢ches | {stats['success_rate_percent']}% succ√®s | {stats['total_cost_euros']}‚Ç¨")
        total_cost += stats['total_cost_euros']
        if stats['total_tasks'] > 0:
            total_time += stats.get('average_duration_seconds', 0)
    
    print(f"\nüéØ R√âSULTAT FINAL:")
    print(f"   Co√ªt total: {total_cost:.4f}‚Ç¨")
    print(f"   Temps moyen: {total_time:.2f}s")
    print(f"   Pipeline: {'‚úÖ SUCC√àS' if coder_result.get('success', False) else '‚ùå √âCHEC'}")

async def test_simple_script():
    print("\n" + "=" * 60)
    print("üìú Test Bonus: G√©n√©ration d'un script simple")
    print("=" * 60)
    
    # Test d'un script simple
    script_description = "Script Python pour convertir des fichiers CSV en JSON avec validation des donn√©es"
    
    # Pipeline rapide pour script
    analysis_task = {
        'id': 'script_test',
        'type': 'analysis', 
        'description': script_description
    }
    
    analysis_result = await analysis_agent.start_task(analysis_task)
    
    architect_task = {
        'id': 'script_test',
        'type': 'architect',
        'description': script_description,
        'context': {'analysis': analysis_result}
    }
    
    architect_result = await architect_agent.start_task(architect_task)
    
    coder_task = {
        'id': 'script_test',
        'type': 'coder',
        'description': script_description,
        'context': {
            'analysis': analysis_result,
            'architect': architect_result
        }
    }
    
    coder_result = await coder_agent.start_task(coder_task)
    
    if coder_result['success']:
        print(f"‚úÖ Script g√©n√©r√©: {coder_result['file_count']} fichiers")
        
        # V√©rifiez que le script principal existe
        if 'main.py' in coder_result['generated_files']:
            main_content = coder_result['generated_files']['main.py']
            if 'argparse' in main_content and 'csv' in main_content:
                print("   ‚úÖ Structure de script CLI d√©tect√©e")
        
        print(f"   Commandes: {coder_result['run_commands']}")
    else:
        print(f"‚ùå Erreur script: {coder_result['error']}")

if __name__ == "__main__":
    asyncio.run(test_full_pipeline())
    asyncio.run(test_simple_script())
